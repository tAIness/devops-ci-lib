name: Reusable - Snyk Container Scan (with ignore support)

on:
  workflow_call:
    inputs:
      images:               # newline-separated list of images
        description: "Images to scan (newline-separated)"
        required: true
        type: string
      dockerfiles:          # newline-separated list matching images order
        description: "Dockerfile paths (newline-separated, same order as images)"
        required: true
        type: string
      severity:
        description: "Fail threshold (low|medium|high|critical)"
        default: high
        type: string
      ignore_list_path:
        description: "Optional path to newline list of vuln IDs to ignore"
        default: ignores.txt/ignores.txt
        type: string
      use_shared_policy:
        description: "Fallback to ci-lib/ignores.txt/.snyk if no repo policy/ignores"
        default: true
        type: boolean
      allow_failure:
        description: "If true, do not fail the job on findings"
        default: false
        type: boolean
    secrets:
      SNYK_TOKEN:
        required: true

jobs:
  snyk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout caller repo (the app)
        uses: actions/checkout@v4

      - name: (Optional) Checkout shared ci-lib for baseline policy
        if: ${{ inputs.use_shared_policy == true }}
        uses: actions/checkout@v4
        with:
          repository: tAIness/devops-ci-lib
          path: ci-lib

      - name: Install Snyk CLI
        run: |
          set -e
          curl -fsSL https://static.snyk.io/cli/latest/snyk-linux -o snyk
          chmod +x snyk
          sudo mv snyk /usr/local/bin/snyk
          snyk --version

      # Build .snyk policy in this priority:
      # 1) caller repo's ignore list -> generate .snyk
      # 2) caller repo's .snyk
      # 3) ci-lib/ignores.txt/.snyk (shared)
      - name: Build/Select policy
        run: |
          set -e
          GEN=""
          if [ -f "${{ inputs.ignore_list_path }}" ]; then
            echo "Generating .snyk from ${{ inputs.ignore_list_path }}"
            echo "version: v1.23.0" > .snyk
            echo "ignore:" >> .snyk
            while read -r VID || [ -n "$VID" ]; do
              [ -z "$VID" ] && continue
              cat >> .snyk <<EOF
  $VID:
    - '*':
        reason: "Ignored via ${{ inputs.ignore_list_path }}"
        expires: "2026-01-01T00:00:00.000Z"
EOF
            done < "${{ inputs.ignore_list_path }}"
            GEN="yes"
          elif [ -f ".snyk" ]; then
            echo "Using repo .snyk policy"
          elif [ -f "ci-lib/ignores.txt/.snyk" ]; then
            echo "Using ci-lib/ignores.txt/.snyk baseline"
            cp ci-lib/ignores.txt/.snyk .snyk
          else
            echo "No policy supplied; proceeding without ignores"
          fi
          [ -f ".snyk" ] && { echo "--- .snyk in use ---"; sed -n '1,120p' .snyk || true; }

      - name: Snyk auth
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth "$SNYK_TOKEN"

      - name: Scan images with Snyk (honors policy)
        id: scan
        shell: bash
        continue-on-error: ${{ inputs.allow_failure }}
        env:
          SEVERITY: ${{ inputs.severity }}
        run: |
          set -euo pipefail
          IFS=$'\n' read -r -d '' -a IMAGES < <(printf "%s\0" "${{ inputs.images }}")
          IFS=$'\n' read -r -d '' -a FILES  < <(printf "%s\0" "${{ inputs.dockerfiles }}")
          if [ "${#IMAGES[@]}" -ne "${#FILES[@]}" ]; then
            echo "images and dockerfiles count mismatch"
            exit 1
          fi
          POLICY_OPT=""
          [ -f ".snyk" ] && POLICY_OPT="--policy-path=.snyk"

          for i in "${!IMAGES[@]}"; do
            IMG="${IMAGES[$i]}"
            DF="${FILES[$i]}"
            echo "=== Snyk scan: $IMG (file=$DF) ==="
            # Save SARIF per-image for code scanning upload (optional)
            OUT="snyk-$(echo "$IMG" | tr '/:@' '_').sarif"
            snyk container test "$IMG" --file="$DF" \
              --severity-threshold="$SEVERITY" \
              $POLICY_OPT \
              --sarif-file-output="$OUT"
          done

      - name: Upload SARIF to GitHub (optional but nice)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .
