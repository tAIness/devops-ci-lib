name: _cut-tag (reusable)
on:
  workflow_call:
    inputs:
      bump:
        description: "SemVer bump"
        type: string
        default: patch   # patch|minor|major
      prefix:
        type: string
        default: "v"
      initial_version:
        type: string
        default: "1.0.0"
      create_github_release:
        type: boolean
        default: true
permissions:
  contents: write   # needed to create & push tags and optional releases

jobs:
  bump-and-tag:
    runs-on: ubuntu-latest
    outputs:
      next: ${{ steps.ver.outputs.next }}
      base: ${{ steps.ver.outputs.base }}
    steps:
      - name: Checkout (with full history & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute next version
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          prefix="${{ inputs.bump && inputs.bump != '' && inputs.prefix || 'v' }}"
          bump="${{ inputs.bump }}"
          initial="${{ inputs.initial_version }}"
          # get latest tag that matches prefix+semver
          latest="$(git tag -l "${prefix}[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname | head -n1 || true)"
          if [[ -z "$latest" ]]; then base="${prefix}${initial}"; else base="$latest"; fi
          ver="${base#$prefix}"
          IFS='.' read -r MAJ MIN PAT <<<"$ver"
          case "$bump" in
            patch) PAT=$((PAT+1));;
            minor) MIN=$((MIN+1)); PAT=0;;
            major) MAJ=$((MAJ+1)); MIN=0; PAT=0;;
            *) echo "Unknown bump: $bump" >&2; exit 1;;
          esac
          next="${prefix}${MAJ}.${MIN}.${PAT}"
          echo "base=$base"  >> $GITHUB_OUTPUT
          echo "next=$next"  >> $GITHUB_OUTPUT
          echo "Computed: $base -> $next"

      - name: Configure git author
        run: |
          git config user.name  "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create and push tag
        shell: bash
        run: |
          set -euo pipefail
          tag="${{ steps.ver.outputs.next }}"
          # Safety: do nothing if tag exists remotely
          if git ls-remote --tags origin | grep -q "refs/tags/${tag}$"; then
            echo "::notice::Tag ${tag} already exists on origin; skipping push"
            exit 0
          fi
          git tag -a "$tag" -m "Release $tag"
          git push origin "$tag"
          echo "Pushed $tag"

      - name: Create GitHub Release (optional)
        if: ${{ inputs.create_github_release }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.next }}
          generate_release_notes: true
