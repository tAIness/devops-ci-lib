name: Reusable Container CI Engine

on:
  workflow_call:
    inputs:
      matrix:
        description: JSON with service build matrix
        required: true
        type: string
      push_images:
        description: Push to Docker Hub?
        required: false
        default: false
        type: boolean
      run_snyk:
        description: Run Snyk container scan?
        required: false
        default: true
        type: boolean
      run_e2e:
        description: Run Playwright e2e?
        required: false
        default: true
        type: boolean
      push_to_nexus:
        description: Mirror images to Nexus?
        required: false
        default: false
        type: boolean
      python_version:
        required: false
        default: "3.12"
        type: string
      node_version:
        required: false
        default: "20"
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      SNYK_TOKEN:
        required: false
      NEXUS_URL:
        required: false
      NEXUS_USERNAME:
        required: false
      NEXUS_PASSWORD:
        required: false

permissions:
  contents: read
  id-token: write  # attestation
  packages: write

env:
  CACHE_SCOPE: ${{ github.workflow }}-${{ github.ref_name }}

jobs:
  lint_unit:
    name: Lint & Unit tests (Python)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install deps
        run: |
          python -m pip install -U pip wheel
          if [ -f app/requirements.txt ]; then pip install -r app/requirements.txt; fi
          if [ -f app/tests/requirements.txt ]; then pip install -r app/tests/requirements.txt; fi
          pip install pylint pytest requests

      - name: Pylint
        run: |
          pylint app/*.py || true
          # Fail on real issues if you want:
          # python -m pylint app/*.py

      - name: Unit tests
        run: |
          python -m pytest -q --junitxml=results.xml app/tests/*.py
      - name: Publish JUnit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-python
          path: results.xml
          if-no-files-found: ignore

  build:
    name: Build (and optionally push) images
    needs: [lint_unit]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.matrix) }}
    env:
      DOCKERHUB_NS: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_NAME: ${{ github.event.repository.name }}-${{ matrix.service }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Docker meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ env.DOCKERHUB_NS }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Login to Docker Hub
        if: inputs.push_images == true && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build (and maybe push)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: ${{ inputs.push_images && github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ env.CACHE_SCOPE }}-${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ env.CACHE_SCOPE }}-${{ matrix.service }}

      - name: Pick one tag for local scans
        id: picktag
        run: |
          first_tag="$(printf '%s\n' "${TAGS}" | head -n1)"
          echo "tag=$first_tag" >> $GITHUB_OUTPUT
        env:
          TAGS: ${{ steps.meta.outputs.tags }}

      - name: Setup Snyk
        if: inputs.run_snyk == true && secrets.SNYK_TOKEN != ''
        uses: snyk/actions/setup@v4

      - name: Snyk container test (high+)
        if: inputs.run_snyk == true && secrets.SNYK_TOKEN != ''
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk container test "${{ steps.picktag.outputs.tag }}" \
            --file="${{ matrix.dockerfile }}" \
            --severity-threshold=high || true
          # Optional: snyk ignore file can be honored here

      - name: Generate SBOM (SPDX)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.DOCKERHUB_NS }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          artifact-name: sbom-${{ matrix.service }}-${{ github.run_id }}.spdx.json
          upload-artifact: true

      - name: Attest build provenance
        if: inputs.push_images == true && github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: docker.io/${{ env.DOCKERHUB_NS }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Mirror to Nexus (optional)
        if: inputs.push_images == true && inputs.push_to_nexus == true && github.event_name != 'pull_request' && secrets.NEXUS_URL != ''
        run: |
          sudo apt-get update -y && sudo apt-get install -y skopeo
          # Copy the pushed digest to Nexus preserving manifest
          SRC="docker://docker.io/${DOCKERHUB_NS}/${IMAGE_NAME}@${{ steps.build.outputs.digest }}"
          DST="docker://${NEXUS_URL}/${IMAGE_NAME}"
          echo "${NEXUS_PASSWORD}" | skopeo login --username "${NEXUS_USERNAME}" --password-stdin "${NEXUS_URL}"
          skopeo copy --all "$SRC" "$DST"
        env:
          NEXUS_URL: ${{ secrets.NEXUS_URL }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

  e2e:
    name: Playwright e2e
    if: inputs.run_e2e == true
    needs: [lint_unit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build & run stack for tests
        run: |
          docker compose -f docker-compose.yml up -d --build
          # wait for web
          for i in {1..30}; do curl -fsS http://localhost:8080/health && break || sleep 2; done

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Install e2e deps
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run e2e tests
        run: npx playwright test --reporter=html

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          if-no-files-found: warn

      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.yml down -v
